{
  "name": "tung_ranaly",
  "version": "0.1.8",
  "description": "Ranaly client library",
  "keywords": [
    "ranaly"
  ],
  "author": {
    "name": "Juneja"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JunejaTung/tung_ranaly.git"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "redis": "0.8.2",
    "moment": "2.0.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# Ranaly - a node.js ranaly client\n[![Build Status](https://travis-ci.org/luin/node_ranaly.png?branch=master)](https://travis-ci.org/luin/node_ranaly)\n\n该版本是在luin/node_ranaly基础上增加了如下小特性：     \n1、Amount时间戳支持分钟级；   \n2、提供减法计数接口；   \n3、支持带时间戳的总值数据采集。    \n\n\nRanaly可以非常简单地统计项目中的各种数据，本项目是ranaly的node.js客户端。想要了解更多关于ranaly的介绍请访问[ranaly项目主页](https://github.com/luin/ranaly)。\n\n## 安装\n\n\tnpm install tung_ranaly\n\n## 使用方法\n首先加载ranaly库：\n\t\n\tvar ranaly = require('tung_ranaly');\n\n而后创建ranaly连接：\n\n\tvar client = ranaly.createClient(port, host, keyPrefix);\n\n其中`post`和`host`是Redis数据库的端口号和主机地址，`keyPrefix`用来指定ranaly向Redis加入的键的前缀以防止命名冲突，默认值是`RANALY:`。\n\n如果程序中已经使用[node_redis](https://github.com/mranney/node_redis)库建立了到Redis的连接，也可以将该实例传入createClient函数：\n\n\tvar redis = require('redis').createClient();\n\tvar client = ranaly.createClient(redis, keyPrefix);\n\nRanaly支持3种数据类型，分别是Amount、Realtime和DataList。\n## Amount\n创建一个Amount实例：\n\n\tvar users = new client.Amount('Users');\n\n### incr\n`incr`方法用来增加实例的值，如每当有新用户注册时可以通过如下方法增加用户数量：\n\t\n\tusers.incr(function (err, total) {\n\t\tconsole.log('用户总数为：' + total + '个');\n\t});\n\n`incr`函数的定义是：\n\n\tincr([increment, [when, [callback]])\n\n其中`increment`指增加的数量，默认为1。`when`指增长发生的时间，`Date`类型，默认为`new Date()`，即当前时间。`callback`的第二个参数返回增长后的总数。\n\n### get\n`get`方法用来获取实例在若干个时间的数量，如：\n\n\tusers.get(['20130218', '20130219'], function (err, result) {\n\t\tconsole.log(result);\n\t});\n\n第一个参数是时间的数组，时间的表示方法为`YYYYMMDD`或`YYYYMMDDHH`。如想获取今天和当前小时的注册用户数量：\n\n\tvar now = moment(); // 需要使用moment库\n\tusers.get([now.format('YYYYMMDD'), now.format('YYYYMMDDHH')], function (err, results) {\n\t\tconsole.log('今天新注册的用户数量：' + results[0]);\n\t\tconsole.log('当前小时新注册的用户数量：' + results[1]);\n\t});\n\n### sum\n`sum`方法用来获取实例在若干个时间内总共的数量，使用方法和`get`一样，不再赘述。特例是当第一个参数为空时，`sum`会返回该Amount实例的总数。如：\n\n\tusers.sum([], function (err, result) {\n\t\tconsole.log('用户总数为：' + total + '个');\n\t});\n\t\n## Realtime\n创建一个Realtime实例：\n\n\tvar memory = new client.Realtime('Memory');\n\n### incr\n`incr`方法用来递增实例的值，如增加当前内存占用的空间：\n\n\tmemory.incr(1, function (err, result) {\n\t\tconsole.log('当前内存占用为：' + result);\n\t});\n\n其中第一个参数表示增加的数量，如果省略则默认为1。\n\n### set\n`set`方法用来设置实例的值，如：\n\n\tmemory.set(20);\n\n### get\n`get`方法用来获得实例的值，如：\n\n\tmemory.get(function (err, result) {\n\t\tconsole.log('当前内存占用为：' + result);\n\t});\n\n### 实时通知\n当修改了某个Realtime实例的值后，ranaly会使用Redis的`PUBLISH`命令派发通知，`channel`可以通过实例的`channel`属性获得，如：\n\n\tvar sub = redis.createClient();\n\tsub.subscribe(memory.channel);\n\tsub.on('message', function (channel, message) {\n\t\tif (channel === memory.channel) {\n\t\t\tconsole.log('当前内存占用为：' + message);\n\t\t}\n\t});\n\n## DataList\n创建一个DataList实例：\n\n\tvar userAvatars = new client.DataList('Avatars');\n\n### push\n`push`方法用来向实例加入一个元素，可以是字符串、数组、数组或对象类型，如：\n\n\tuserAvatars.push({\n\t\turl: 'http://demo.com/avatar.png',\n\t\tuserID: 17\n\t}, 50, function (err, length) {\n\t});\n\n其中第二个参数表示保留的记录数量，默认为100。\n\n### len\n`len`方法用来获得实例的大小，如：\n\n\tuserAvatars.len(function (err, length) {\n\t});\n\n### range\n`range`方法用来获得队列中的某个片段，第一个参数表示起始元素索引，第二个元素表示末尾元素索引。索引从0开始，支持负索引，即-1表示队列中最后一个元素。如：\n\n\tuserAvatars.range(0, -1, function (err, avatars) {\n\t\tavatars.forEach(function (avatar) {\n\t\t\tconsole.log(avatar.url);\n\t\t});\n\t});\n",
  "readmeFilename": "README.md",
  "gitHead": "5bbaa0abaef1b3e3ebb3c19754e63e6b4c8a2a50",
  "bugs": {
    "url": "https://github.com/JunejaTung/tung_ranaly/issues"
  },
  "homepage": "https://github.com/JunejaTung/tung_ranaly#readme",
  "_id": "tung_ranaly@0.1.8",
  "_shasum": "873019f6657370f57939c27f6e99bc359aaa6d8e",
  "_from": "tung_ranaly@*"
}
